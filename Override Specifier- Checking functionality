#include "pch.h"
#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Base {

public:

int balance;

virtual void sayHello() const {

//A polymorphic design need to have the exact function signature in order to work
//here our SayHello function is const, the derivative is not
cout << "Hello, I'm a Base class" << endl;
}

virtual ~Base() {};
};

class Derived: public Base {

public:

virtual void sayHello() override { //ERROR, shows you that the virual overrided is not working
cout << "Hello, I'm a Derived class" << endl;


}

virtual ~Derived() {};

};

// This function is doing static binding - It determine what class method will execute in this function during compile time
void CheckClass(Base &obj) {
cout << "Let's see what kind of class says hello"<<endl;

obj.sayHello();

}
int main() {


Base *d = new Derived();

Base *b = new Base();

d->sayHello();
b->sayHello();

CheckClass(*b);

CheckClass(*d);




system("pause");
return 0;
}
